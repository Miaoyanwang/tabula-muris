---
title: "Tongue FACS Notebook"
output: html_notebook
---

Specify the tissue of interest, run the boilerplate code which sets up the functions and environment, load the tissue object.

```{r}
tissue_of_interest = "Tongue"
library(here)
source(here("00_data_ingest", "02_tissue_analysis_rmd", "boilerplate.R"))
load_tissue_facs(tissue_of_interest)
```

Visualize top genes in principal components

```{r, echo=FALSE, fig.height=4, fig.width=8}
PCHeatmap(object = tiss, pc.use = 1:3, cells.use = 1000, do.balanced = TRUE, label.columns = FALSE, num.genes = 8)
```

Later on (in FindClusters and TSNE) you will pick a number of principal components to use. This has the effect of keeping the major directions of variation in the data and, ideally, supressing noise. There is no correct answer to the number to use, but a decent rule of thumb is to go until the plot plateaus.

```{r}
PCElbowPlot(object = tiss)
```

Choose the number of principal components to use.
```{r}
# Set number of principal components. 
n.pcs = 15
```


The clustering is performed based on a nearest neighbors graph. Cells that have similar expression will be joined together. The Louvain algorithm looks for groups of cells with high modularity--more connections within the group than between groups. The resolution parameter determines the scale...higher resolution will give more clusters, lower resolution will give fewer.

For the top-level clustering, aim to under-cluster instead of over-cluster. It will be easy to subset groups and further analyze them below.

```{r}
# Set resolution 
res.used <- 0.9

tiss <- FindClusters(object = tiss, reduction.type = "pca", dims.use = 1:n.pcs, 
    resolution = res.used, print.output = 0, save.SNN = TRUE, force.recalc = TRUE)
```

To visualize 
```{r}
# If cells are too spread out, you can raise the perplexity. If you have few cells, try a lower perplexity (but never less than 10).
tiss <- RunTSNE(object = tiss, dims.use = 1:n.pcs, seed.use = 20, perplexity=45, dim.embed = 2)
# note that you can set do.label=T to help label individual clusters
TSNEPlot(object = tiss, do.label = T, label.size = 6)

```


Check expression of genes of interset.

```{r, echo=FALSE, fig.height=12, fig.width=8}
genes_to_check = c('Krt84', 'Krt36', 'Hoxc13', 'Krt4', 'Krt13', 'Krt78', 'Krt10', 'Sbsn', 'Klf4', 'Epcam', 'Cdc20','Krt15','Dcn', 'Krt5','Krt14')

FeaturePlot(tiss, genes_to_check, pt.size = 1, nCol = 3)
```

Dotplots let you see the intensity of exppression and the fraction of cells expressing for each of your genes of interest.

```{r, echo=FALSE, fig.height=4, fig.width=8}
# To change the y-axis to show raw counts, add use.raw = T.
DotPlot(tiss, genes_to_check, plot.legend = T)
```

How big are the clusters?
```{r}
table(tiss@ident)
```

```{r}
tiss1=BuildClusterTree(tiss)
```

```{r}
marker15=FindAllMarkersNode(tiss1, 15)
```
```{r}
print(x = head(x= marker15, n = 30))
```



Which markers identify a specific cluster?

```{r}
clust.markers <- FindMarkers(object = tiss, ident.1 = 6, only.pos = TRUE, min.pct = 0.25, thresh.use = 0.25)
```

```{r}
print(x = head(x= clust.markers, n = 30))
```

You can also compute all markers for all clusters at once. This may take some time.
```{r}
tiss.markers <- FindAllMarkers(object = tiss, only.pos = TRUE, min.pct = 0.25, thresh.use = 0.25)
```

Display the top markers you computed above.
```{r}
tiss.markers %>% group_by(cluster)
```

## Assigning cell type identity to clusters

At a coarse level, we can use canonical markers to match the unbiased clustering to known cell types:

0: Basal/differentiating cells
1: Basal/differentiating cells
2: Proliferating cells
3: Maturing/nonkeratinizing cells
4: Basal/differentiating cells
5: Stratified/differentiated keratinocytes
6: Basal/differentiating cells
7: Filliform Keratinocytes

```{r}
# stash current cluster IDs
tiss <- StashIdent(object = tiss, save.name = "cluster.ids")

# enumerate current cluster IDs and the labels for them
cluster.ids <- c(0, 1, 2, 3, 4, 5, 6, 7)
free_annotation <- c()
cell_ontology_class <-c("basal cell of epidermis", "basal cell of epidermis", "keratinocyte", "keratinocyte", "basal cell of epidermis", "keratinocyte", "basal cell of epidermis", "keratinocyte" )
cell_ontology_id <- c("CL:0000312", "CL:0000312", "CL:0000312", "CL:0000312", "CL:0000312", "CL:0000312", "CL:0000312", "CL:0000312" )

tiss@meta.data[,'free_annotation'] <- NA
tiss@meta.data[,'cell_ontology_class'] <- plyr::mapvalues(x = tiss@ident, from = cluster.ids, to = cell_ontology_class)
tiss@meta.data[,'cell_ontology_id'] <- plyr::mapvalues(x = tiss@ident, from = cluster.ids, to = cell_ontology_id)

tiss@meta.data[tiss@cell.names,'cell_ontology_class'] <- as.character(tiss@meta.data$cell_ontology_class)
tiss@meta.data[tiss@cell.names,'cell_ontology_id'] <- as.character(tiss@meta.data$cell_ontology_id)

TSNEPlot(object = tiss, do.label = TRUE, pt.size = 1, label.size = 3, group.by='cell_ontology_class', do.return = TRUE)
#dev.copy(png,'annotated_plot-2.png')
#dev.off()
```


## Checking for batch effects


Color by metadata, like plate barcode, to check for batch effects.
```{r}
TSNEPlot(object = tiss, do.return = TRUE, group.by = "mouse.sex")
```

Print a table showing the count of cells in each identity category from each plate.

```{r}
table(as.character(tiss@ident), as.character(tiss@meta.data$plate.barcode))
```



# Save the Robject for later
When you save the annotated tissue, please give it a name.

```{r}
filename = here('00_data_ingest', '04_tissue_robj_generated', 
                     paste0("facs", tissue_of_interest, "_seurat_tiss.Robj"))
print(filename)
save(tiss, file=filename)
```

```{r}
# To reload a saved object
# filename = here('00_data_ingest', '04_tissue_robj_generated', 
#                      paste0("facs", tissue_of_interest, "_seurat_tiss.Robj"))
# load(file=filename)
```



# Export the final metadata

So that Biohub can easily combine all your cell_ontology_classs, please export them as a simple csv.

```{r}
head(tiss@meta.data)
```


```{r}
filename = here('00_data_ingest', '03_tissue_cell_ontology_class_csv', 
                     paste0(tissue_of_interest, "_cell_ontology_class.csv"))
write.csv(tiss@meta.data[,c('plate.barcode','cell_ontology_class','cell_ontology_id')], file=filename)
```


